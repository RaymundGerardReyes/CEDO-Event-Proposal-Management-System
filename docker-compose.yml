# ========================================
# CEDO Partnership Management System
# Docker Compose Configuration
# Based on Multi-stage Dockerfiles
# ========================================

services:
  # ========================================
  # MySQL Database Service
  # ========================================
  mysql:
    image: mysql:8.0
    container_name: cedo_mysql_db
    # env_file removed to prevent conflicts.
    # Only the environment variables explicitly defined below are used.
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD_SECRET}"
      MYSQL_DATABASE: "${MYSQL_DATABASE_NAME}"
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysql",
             "-uroot", "-p${MYSQL_ROOT_PASSWORD_SECRET}",
             "-e", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - cedo-network

  # ========================================
  # MongoDB Database Service
  # ========================================
  mongodb:
    image: mongo:7.0
    container_name: cedo_mongo_db
    environment:
      # These variables are required to create the initial root user.
      # They must match the variable names used in your .env file.
      MONGO_INITDB_ROOT_USERNAME: "${MONGO_ROOT_USER}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_ROOT_PASSWORD}"
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    restart: unless-stopped
    networks:
      - cedo-network

  # ========================================
  # Backend Service - Development
  # ========================================
  backend:
    build: ./backend        # or image: cedo-backend:latest
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
      - mysql
    env_file:
      - .env

  # ========================================
  # Frontend Service - Development
  # ========================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
      args:
        BUILD_VERSION: "${BUILD_VERSION:-1.0.0}"
        BUILD_DATE: "${BUILD_DATE}"
        GIT_COMMIT: "${GIT_COMMIT:-unknown}"
        NEXT_VERSION: "15.3.2"
    container_name: cedo_frontend_service
    env_file:
      - ./frontend/.env
    volumes:
      - ./frontend:/usr/src/app
      - frontend_node_modules:/usr/src/app/node_modules
    ports:
      - "3000:3000"
    environment:
      # Node.js Configuration
      NODE_ENV: "development"
      PORT: "3000"
      HOSTNAME: "0.0.0.0"
      
      # Next.js Configuration
      NEXT_TELEMETRY_DISABLED: "1"
      
      # API Configuration
      NEXT_PUBLIC_API_URL: "http://localhost:5000/api"
      
      # Security Secrets (for middleware JWT verification)
      JWT_SECRET_DEV: "${JWT_SECRET_DEV}"
      JWT_SECRET: "${JWT_SECRET_DEV}"
      
      # Google Services
      NEXT_PUBLIC_GOOGLE_CLIENT_ID: "${NEXT_PUBLIC_GOOGLE_CLIENT_ID}"
      
      # reCAPTCHA
      NEXT_PUBLIC_RECAPTCHA_SITE_KEY: "${NEXT_PUBLIC_RECAPTCHA_SITE_KEY}"
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - cedo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ========================================
  # Production Services
  # ========================================
  backend-prod:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_VERSION: "${BUILD_VERSION:-1.0.0}"
        BUILD_DATE: "${BUILD_DATE}"
        GIT_COMMIT: "${GIT_COMMIT:-unknown}"
    container_name: cedo_backend_prod
    env_file:
      - .env
    environment:
      NODE_ENV: "production"
      PORT: "5000"
      DB_HOST: "${DB_HOST}"
      DB_PORT: "${PORT}"
      DB_NAME: "${MYSQL_DATABASE_NAME}"
      DB_USER: "${DB_USER}"
      DB_PASSWORD: "${MYSQL_ROOT_PASSWORD_SECRET}"
      JWT_SECRET: "${JWT_SECRET}"
      COOKIE_SECRET: "${COOKIE_SECRET}"
      FRONTEND_URL: "${FRONTEND_URL_PROD}"
      GOOGLE_CLIENT_ID: "${GOOGLE_CLIENT_ID_BACKEND}"
      RECAPTCHA_SECRET_KEY: "${RECAPTCHA_SECRET_KEY}"
    ports:
      - "5001:5000"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - cedo-network
    profiles:
      - production

  frontend-prod:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_VERSION: "${BUILD_VERSION:-1.0.0}"
        BUILD_DATE: "${BUILD_DATE}"
        GIT_COMMIT: "${GIT_COMMIT:-unknown}"
        NEXT_VERSION: "15.3.2"
    container_name: cedo_frontend_prod
    env_file:
      - ./frontend/.env
    environment:
      NODE_ENV: "production"
      PORT: "3000"
      HOSTNAME: "0.0.0.0"
      NEXT_TELEMETRY_DISABLED: "1"
      NEXT_PUBLIC_API_URL: "http://localhost:5001/api"
      JWT_SECRET: "${JWT_SECRET_PROD}"
      NEXT_PUBLIC_GOOGLE_CLIENT_ID: "${NEXT_PUBLIC_GOOGLE_CLIENT_ID}"
      NEXT_PUBLIC_RECAPTCHA_SITE_KEY: "${NEXT_PUBLIC_RECAPTCHA_SITE_KEY}"
    ports:
      - "3001:3000"
    depends_on:
      backend-prod:
        condition: service_started
    networks:
      - cedo-network
    profiles:
      - production

  # ========================================
  # Testing Services
  # ========================================
  backend-test:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: testing
      args:
        BUILD_VERSION: "${BUILD_VERSION:-1.0.0}"
        BUILD_DATE: "${BUILD_DATE}"
        GIT_COMMIT: "${GIT_COMMIT:-unknown}"
    container_name: cedo_backend_test
    env_file:
      - .env
    volumes:
      - ./backend:/usr/src/app
      - backend_node_modules:/usr/src/app/node_modules
    environment:
      NODE_ENV: "test"
      DB_HOST: "mysql"
      DB_PORT: "3306"
      DB_NAME: "${MYSQL_DATABASE_NAME}_test"
      DB_USER: "root"
      DB_PASSWORD: "${MYSQL_ROOT_PASSWORD_SECRET}"
      JWT_SECRET: "${JWT_SECRET_DEV}"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - cedo-network
    profiles:
      - testing

  frontend-test:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: testing
      args:
        BUILD_VERSION: "${BUILD_VERSION:-1.0.0}"
        BUILD_DATE: "${BUILD_DATE}"
        GIT_COMMIT: "${GIT_COMMIT:-unknown}"
        NEXT_VERSION: "15.3.2"
    container_name: cedo_frontend_test
    volumes:
      - ./frontend:/usr/src/app
      - frontend_node_modules:/usr/src/app/node_modules
    environment:
      NODE_ENV: "test"
      CI: "true"
      NEXT_PUBLIC_API_URL: "http://backend-test:5000/api"
    depends_on:
      backend-test:
        condition: service_started
    networks:
      - cedo-network
    profiles:
      - testing

  # ========================================
  # Development with Turbopack
  # ========================================
  frontend-turbo:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development-turbo
      args:
        BUILD_VERSION: "${BUILD_VERSION:-1.0.0}"
        BUILD_DATE: "${BUILD_DATE}"
        GIT_COMMIT: "${GIT_COMMIT:-unknown}"
        NEXT_VERSION: "15.3.2"
    container_name: cedo_frontend_turbo
    volumes:
      - ./frontend:/usr/src/app
      - frontend_node_modules:/usr/src/app/node_modules
      - /usr/src/app/.next
    ports:
      - "3002:3000"
    environment:
      NODE_ENV: "development"
      PORT: "3000"
      HOSTNAME: "0.0.0.0"
      NEXT_TELEMETRY_DISABLED: "1"
      TURBOPACK: "1"
      NEXT_PUBLIC_API_URL: "http://localhost:5000/api"
      NEXT_PUBLIC_GOOGLE_CLIENT_ID: "${NEXT_PUBLIC_GOOGLE_CLIENT_ID}"
      NEXT_PUBLIC_RECAPTCHA_SITE_KEY: "${NEXT_PUBLIC_RECAPTCHA_SITE_KEY}"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - cedo-network
    profiles:
      - turbo

  # ========================================
  # Bundle Analyzer Service
  # ========================================
  frontend-analyzer:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: analyzer
      args:
        BUILD_VERSION: "${BUILD_VERSION:-1.0.0}"
        BUILD_DATE: "${BUILD_DATE}"
        GIT_COMMIT: "${GIT_COMMIT:-unknown}"
        NEXT_VERSION: "15.3.2"
    container_name: cedo_frontend_analyzer
    ports:
      - "8888:8888"
    networks:
      - cedo-network
    profiles:
      - analyzer

  # ========================================
  # Static Export with Nginx
  # ========================================
  frontend-static:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: nginx-static
      args:
        BUILD_VERSION: "${BUILD_VERSION:-1.0.0}"
        BUILD_DATE: "${BUILD_DATE}"
        GIT_COMMIT: "${GIT_COMMIT:-unknown}"
        NEXT_VERSION: "15.3.2"
    container_name: cedo_frontend_static
    ports:
      - "8080:80"
    networks:
      - cedo-network
    profiles:
      - static

  # ========================================
  # Database Initialization Service
  # ========================================
  db-init:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: db-init
      args:
        BUILD_VERSION: "${BUILD_VERSION:-1.0.0}"
        BUILD_DATE: "${BUILD_DATE}"
        GIT_COMMIT: "${GIT_COMMIT:-unknown}"
    container_name: cedo_db_init
    environment:
      NODE_ENV: "development"
      # Standardizing on DB_* prefix for consistency with the backend app
      DB_HOST: "mysql"
      DB_PORT: "3306"
      DB_NAME: "${MYSQL_DATABASE_NAME}"
      DB_USER: "root"
      DB_PASSWORD: "${MYSQL_ROOT_PASSWORD_SECRET}"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - cedo-network
    profiles:
      - db-init

  # ========================================
  # Linting Service
  # ========================================
  frontend-lint:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: linter
      args:
        BUILD_VERSION: "${BUILD_VERSION:-1.0.0}"
        BUILD_DATE: "${BUILD_DATE}"
        GIT_COMMIT: "${GIT_COMMIT:-unknown}"
        NEXT_VERSION: "15.3.2"
    container_name: cedo_frontend_lint
    volumes:
      - ./frontend:/usr/src/app
      - frontend_node_modules:/usr/src/app/node_modules
    networks:
      - cedo-network
    profiles:
      - lint

# ========================================
# Networks Configuration
# ========================================
networks:
  cedo-network:
    driver: bridge
    name: cedo-network
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ========================================
# Volumes Configuration
# ========================================
volumes:
  mysql_data:
    name: cedo_mysql_data
    driver: local
  backend_node_modules:
    name: cedo_backend_node_modules
    driver: local
  frontend_node_modules:
    name: cedo_frontend_node_modules
    driver: local
  mongo_data:
    name: cedo_mongo_data
    driver: local 