{
    "info": {
        "name": "CEDO API Tests",
        "description": "Comprehensive API tests for CEDO Google Auth Application",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "üîê Authentication",
            "item": [
                {
                    "name": "Health Check (No Auth)",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/health",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "health"
                            ]
                        }
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Health check response\", function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.status).to.equal(\"ok\");",
                                    "    pm.expect(response.timestamp).to.exist;",
                                    "    console.log(\"‚úÖ Health check passed - Backend is running\");",
                                    "});"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get Current User (With Auth)",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{token}}",
                                "type": "text"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/api/auth/me",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "me"
                            ]
                        }
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Check if token is provided",
                                    "if (!pm.collectionVariables.get(\"token\") || pm.collectionVariables.get(\"token\") === \"\") {",
                                    "    pm.test(\"Skipping test - No token provided\", function () {",
                                    "        pm.expect(true).to.be.true;",
                                    "    });",
                                    "    console.log(\"‚ö†Ô∏è  Skipping authentication test - No token provided\");",
                                    "    console.log(\"üí° To get a token: 1) Start frontend (npm run dev), 2) Visit http://localhost:3000/auth/sign-in, 3) Sign in with Google OAuth, 4) Check localStorage for 'cedo_token'\");",
                                    "} else {",
                                    "    pm.test(\"Status code is 200\", function () {",
                                    "        pm.response.to.have.status(200);",
                                    "    });",
                                    "",
                                    "    pm.test(\"User data is returned\", function () {",
                                    "        const response = pm.response.json();",
                                    "        pm.expect(response.id).to.exist;",
                                    "        pm.expect(response.email).to.exist;",
                                    "        pm.collectionVariables.set(\"userId\", response.id);",
                                    "        console.log(\"‚úÖ Authentication successful - User ID: \" + response.id);",
                                    "    });",
                                    "}"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get Current User (No Auth - Expected 401)",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/auth/me",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "me"
                            ]
                        }
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 401 (Unauthorized)\", function () {",
                                    "    pm.response.to.have.status(401);",
                                    "});",
                                    "",
                                    "pm.test(\"Error message is returned\", function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.error).to.exist;",
                                    "    console.log(\"‚úÖ Authentication protection working - 401 returned for unauthorized access\");",
                                    "});"
                                ]
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "üìù Draft Management",
            "item": [
                {
                    "name": "Create New Draft (With Auth)",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json",
                                "type": "text"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{token}}",
                                "type": "text"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"organizationName\": \"Test Organization\",\n  \"contactEmail\": \"test@example.com\",\n  \"eventType\": \"school-based\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/proposals/drafts",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "proposals",
                                "drafts"
                            ]
                        }
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Check if token is provided",
                                    "if (!pm.collectionVariables.get(\"token\") || pm.collectionVariables.get(\"token\") === \"\") {",
                                    "    pm.test(\"Skipping test - No token provided\", function () {",
                                    "        pm.expect(true).to.be.true;",
                                    "    });",
                                    "    console.log(\"‚ö†Ô∏è  Skipping draft creation test - No token provided\");",
                                    "} else {",
                                    "    pm.test(\"Status code is 200\", function () {",
                                    "        pm.response.to.have.status(200);",
                                    "    });",
                                    "",
                                    "    pm.test(\"Draft ID is returned\", function () {",
                                    "        const response = pm.response.json();",
                                    "        pm.expect(response.draftId).to.exist;",
                                    "        pm.collectionVariables.set(\"draftId\", response.draftId);",
                                    "        console.log(\"‚úÖ Draft created successfully - ID: \" + response.draftId);",
                                    "    });",
                                    "}"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "List All Drafts (With Auth)",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{token}}",
                                "type": "text"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/api/proposals/drafts",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "proposals",
                                "drafts"
                            ]
                        }
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "// Check if token is provided",
                                    "if (!pm.collectionVariables.get(\"token\") || pm.collectionVariables.get(\"token\") === \"\") {",
                                    "    pm.test(\"Skipping test - No token provided\", function () {",
                                    "        pm.expect(true).to.be.true;",
                                    "    });",
                                    "    console.log(\"‚ö†Ô∏è  Skipping draft list test - No token provided\");",
                                    "} else {",
                                    "    pm.test(\"Status code is 200\", function () {",
                                    "        pm.response.to.have.status(200);",
                                    "    });",
                                    "",
                                    "    pm.test(\"Drafts list returned\", function () {",
                                    "        const response = pm.response.json();",
                                    "        pm.expect(response.drafts).to.be.an('array');",
                                    "        pm.expect(response.count).to.be.a('number');",
                                    "        console.log(\"‚úÖ Drafts list retrieved - Count: \" + response.count);",
                                    "    });",
                                    "}"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "List All Drafts (No Auth - Expected 401)",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/proposals/drafts",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "proposals",
                                "drafts"
                            ]
                        }
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 401 (Unauthorized)\", function () {",
                                    "    pm.response.to.have.status(401);",
                                    "});",
                                    "",
                                    "pm.test(\"Error message is returned\", function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.error).to.exist;",
                                    "    console.log(\"‚úÖ Draft protection working - 401 returned for unauthorized access\");",
                                    "});"
                                ]
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "üîç Error Handling",
            "item": [
                {
                    "name": "Non-existent Draft (404)",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{token}}",
                                "type": "text"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/api/proposals/drafts/non-existent-id",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "proposals",
                                "drafts",
                                "non-existent-id"
                            ]
                        }
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 404\", function () {",
                                    "    pm.response.to.have.status(404);",
                                    "});",
                                    "",
                                    "pm.test(\"Error message is returned\", function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.error).to.exist;",
                                    "    console.log(\"‚úÖ 404 handling working - Non-existent resource properly handled\");",
                                    "});"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Invalid Token (401)",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer invalid_token_here",
                                "type": "text"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/api/proposals/drafts",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "proposals",
                                "drafts"
                            ]
                        }
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test(\"Status code is 401\", function () {",
                                    "    pm.response.to.have.status(401);",
                                    "});",
                                    "",
                                    "pm.test(\"Error message is returned\", function () {",
                                    "    const response = pm.response.json();",
                                    "    pm.expect(response.error).to.exist;",
                                    "    console.log(\"‚úÖ Invalid token handling working - 401 returned for invalid token\");",
                                    "});"
                                ]
                            }
                        }
                    ]
                }
            ]
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "// Set token if available",
                    "if (pm.collectionVariables.get(\"token\") && pm.collectionVariables.get(\"token\") !== \"\") {",
                    "    pm.request.headers.add({",
                    "        key: \"Authorization\",",
                    "        value: \"Bearer \" + pm.collectionVariables.get(\"token\")",
                    "    });",
                    "}"
                ]
            }
        }
    ],
    "variable": [
        {
            "key": "baseUrl",
            "value": "http://localhost:5000"
        }
    ]
}